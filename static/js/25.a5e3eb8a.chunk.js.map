{"version":3,"sources":["constants/formFields.constant.js","hocs/formItem.hoc.js","formFields/shipper.signUp.formFields.js","screens/public/Shipper.SignUp.screen.js"],"names":["FORM_ELEMENT_TYPES","INPUT","MULTIPLE_CHECKBOX","INPUT_NUMBER","PASSWORD","TEXTAREA","MARKDOWN","SELECT","CAPTCHA","MONTH_PICKER","FILE_DRAG_DROP","RANGE_PICKER","RADIO","SWITCH","HIDDEN","DATE","CASCADER","Option","CheckboxGroup","Group","formItem","key","rules","kwargs","type","others","customLabel","noLabel","formOptions","Item","label","charAt","toUpperCase","slice","name","Dragger","className","p1","p2","selectOptions","map","item","index","toString","value","valueIndex","customTitle","style","fontSize","fontWeight","dataKeys","flexWrap","i","index1","dataLabel","marginLeft","marginRight","radioOptions","onChange","checkOptions","shipperSignUpFormFields","required","message","prefix","color","placeholder","ShipperSignUpScreen","navigate","handleSubmit","data","a","password","confirmPassword","notification","error","createShipperAccount","username","success","description","margin","onFinish","layout","hideRequiredMark","htmlType","block"],"mappings":"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","file":"static/js/25.a5e3eb8a.chunk.js","sourcesContent":["export const FORM_ELEMENT_TYPES = {\n  INPUT: 'input',\n  MULTIPLE_CHECKBOX:'MULTIPLE_CHECKBOX',\n  INPUT_NUMBER: 'input-number',\n  PASSWORD: 'password',\n  TEXTAREA: 'textarea',\n  MARKDOWN: 'markdown',\n  SELECT: 'select',\n  CAPTCHA: 'captcha',\n  MONTH_PICKER: 'month-picker',\n  FILE_DRAG_DROP: 'file-drag-drop',\n  RANGE_PICKER: 'range-picker',\n  RADIO: 'radio',\n  SWITCH: 'switch',\n  HIDDEN: 'hidden',\n  DATE: 'date',\n  CASCADER: 'cascader',\n};\n\nexport const SUBMIT_FORM = 'SUBMIT_FORM';\n\nexport const CAPTCHA = {\n  type: FORM_ELEMENT_TYPES.CAPTCHA,\n  name: 'captcha',\n  label: 'Captcha',\n  rules: [\n    {\n      required: process.env.NODE_ENV === 'production',\n      message: 'Please solve the captcha',\n    },\n  ],\n};\n","import React from 'react';\nimport { Form, Input, Upload, Select, Radio, DatePicker, Checkbox } from 'antd';\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nconst { Option } = Select;\nconst CheckboxGroup = Checkbox.Group;\n\nexport const formItem = (key, rules, kwargs, type, others, customLabel, noLabel) => {\n  let formOptions = {};\n  if (others) {\n    if (others.formOptions) {\n      formOptions = others.formOptions;\n    }\n  }\n  switch (type) {\n    case FORM_ELEMENT_TYPES.INPUT:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Input {...kwargs} />\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.FILE_DRAG_DROP:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Upload.Dragger {...kwargs}>\n            <p className='ant-upload-drag-icon'>\n              <Icon type='inbox' />\n            </p>\n            <p className='ant-upload-text p-1'>{others.p1}</p>\n            <p className='ant-upload-hint p-1'>{others.p2}</p>\n          </Upload.Dragger>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.SELECT:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Select {...kwargs}>\n            {others.selectOptions.map((item, index) => (\n              <Option\n                key={index.toString()}\n                value={others.valueIndex ? index : item.value || item[others.key] || item}>\n                {others.customTitle ? (\n                  <text style={{ fontSize: 13, fontWeight: 'bold' }}>\n                    {item[others.customTitle]}\n                  </text>\n                ) : (\n                  item.label || item[others.key] || item\n                )}\n                {others.dataKeys ? (\n                  <div className='row' style={{ flexWrap: 'wrap' }}>\n                    {others.dataKeys.map((i,index1) => (\n                      <div className='row'>\n                        {others.dataLabel?(\n                          <text\n                            style={{ fontSize: 11,fontWeight:'bold',\n                              marginLeft: 5, marginRight: 5 }}>\n                            {others.dataLabel[index1]?others.dataLabel[index1]:null}\n                          </text>\n                        ):null}\n                        <text\n                          style={{ fontSize: 11, marginLeft: 5, marginRight: 5 }}>\n                          {item[i]}\n                        </text>\n                      </div>\n                    ))}\n                  </div>\n                ) : null}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.RADIO:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <Radio.Group value='Ggg'>\n            {others.radioOptions.map((item) => (\n              <Radio key={item.value} value={item.value}>\n                {item.label}\n              </Radio>\n            ))}\n          </Radio.Group>\n        </Form.Item>\n      );\n\n    case FORM_ELEMENT_TYPES.DATE:\n      return (\n        <Form.Item\n          key={key}\n          {...formOptions}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}>\n          <DatePicker />\n        </Form.Item>\n      );\n    case FORM_ELEMENT_TYPES.MULTIPLE_CHECKBOX:\n      return (\n        <Form.Item\n          key={key}\n          label={noLabel ? null : customLabel || key.charAt(0).toUpperCase() + key.slice(1)}\n          name={key}\n          rules={rules}\n          {...formOptions}>\n          <CheckboxGroup onChange={others.onChange}>\n            {others.checkOptions.map((i) => (\n              <Checkbox value={i.value}>{i.label}</Checkbox>\n            ))}\n          </CheckboxGroup>\n        </Form.Item>\n      );\n    default:\n      return null;\n  }\n};\n","import React from 'react';\n\nimport { Icon } from '@ant-design/compatible';\nimport { FORM_ELEMENT_TYPES } from 'constants/formFields.constant';\n\nexport const shipperSignUpFormFields = [\n  {\n    key: 'first_name',\n    rules: [{ required: true, message: 'Please input your first name!' }],\n    kwargs: {\n      prefix: <Icon type='mail' style={{ color: 'rgba(0,0,0,.25)' }} />,\n      placeholder: 'First Name',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    label: 'First Name',\n  },\n  {\n    key: 'last_name',\n    rules: [{ required: true, message: 'Please input your last name!' }],\n    kwargs: {\n      prefix: <Icon type='mail' style={{ color: 'rgba(0,0,0,.25)' }} />,\n      placeholder: 'Last Name',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    label: 'Last Name',\n  },\n  {\n    key: 'username',\n    rules: [{ required: true, message: 'Please input your username!' }],\n    kwargs: {\n      prefix: <Icon type='user' style={{ color: 'rgba(0,0,0,.25)' }} />,\n      placeholder: 'Username',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n  },\n  {\n    key: 'email',\n    rules: [{ required: true, message: 'Please input your email!' }],\n    kwargs: {\n      prefix: <Icon type='mail' style={{ color: 'rgba(0,0,0,.25)' }} />,\n      placeholder: 'Email',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n  },\n  {\n    key: 'password',\n    rules: [{ required: true, message: 'Please input your password!' }],\n    kwargs: {\n      prefix: <Icon type='lock' style={{ color: 'rgba(0,0,0,.25)' }} />,\n      placeholder: 'Password',\n      type: 'password',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n  },\n  {\n    key: 'confirmPassword',\n    rules: [{ required: true, message: 'Please input your confirm password!' }],\n    kwargs: {\n      prefix: <Icon type='lock' style={{ color: 'rgba(0,0,0,.25)' }} />,\n      placeholder: 'Confirm Password',\n      type: 'password',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    label: 'Confirm Password',\n  },\n];\n","import React from 'react';\nimport { Form, Button, notification } from 'antd';\n\nimport { formItem } from 'hocs/formItem.hoc';\nimport { shipperSignUpFormFields } from 'formFields/shipper.signUp.formFields';\n\nimport { createShipperAccount } from '@app/common/api/auth';\n\nexport const ShipperSignUpScreen = ({ navigate }) => {\n  const handleSubmit = async (data) => {\n    const { password, confirmPassword } = data;\n    if (password !== confirmPassword) {\n      notification.error({\n        message: 'Password and confirm password should be same!',\n      });\n\n    } else {\n      try {\n        const { data: { username } } = await createShipperAccount(data);\n        notification.success({\n          message: `Create your account`,\n          description: `Sign in as username: ${username} to continue`,\n        });\n        navigate('/');\n      } catch (e) {\n        notification.error({\n          message: 'Error in creating user!',\n          description: e.toString(),\n        });\n      }\n    }\n  };\n\n  return (\n    <div className='App'>\n      <div className='main-sign-up-shipper'>\n        <h1 style={{ margin: 0 }}>Register for Shipper</h1>\n        <p style={{ color: '#a5aeb6' }}>Create your account</p>\n        <div className='sign-up-form-container'>\n          <Form onFinish={handleSubmit} layout='vertical' hideRequiredMark>\n            {shipperSignUpFormFields.map((item) =>\n              formItem(item.key, item.rules, item.kwargs, item.type, item.others, item.label),\n            )}\n            <Form.Item>\n              <Button type='primary' htmlType='submit' block>\n                Create my account\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShipperSignUpScreen;\n"],"sourceRoot":""}